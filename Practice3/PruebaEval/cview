#!/bin/bash

#################################################################
#   Grupo de Laboratorio: GL3
#   Autores:
#   Pablo Blázquez Sánchez
#   Raúl Jiménez de la Cruz
#################################################################

# ADVERTENCIA: El diseño de este código se ha realizado tomando la consideración que para el formato de "MES DÍA"
#              DÍA no usa dos caracteres en todo momento, es decir, para May 06 se muestra como May  6
#              Esta cuestión está reflejada en la línea 87 del código

# Obtains the current directory
directorio_actual=$(pwd)

# Define the syslog directory
sylogDir="/var/log/syslog"

# Define the display format
# %-4s: Aligns the text to the left with a width of 4 characters
# %-6s: Aligns the text to the left with a width of 6 characters
# %s: Prints the text
formato="%-15s %-4s %-10s %-6s %s\n"

# Prints the headers
printf "$formato" "date" "id" "user" "action" "path"

# Function that prints the event
function Printer(){
    # Saves the line in a variable
    linea="$1"

    # Pattern to search for "customlog"
    patron=".*customlog:.*"

    # Check using regular expression
    if [[ $linea =~ $patron ]]; then

        # Extracts the date from the event
        fecha=$(echo "$linea" | awk '{print $1, $2, $3}')
        # Extracts the information from the event
        resultado=$(echo "$linea" | awk -F'customlog: ' '{print $2}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

        # Saves the information in variables using the IFS variable
        # IFS: Internal Field Separator
        # read: Reads the information from the variable
        # -r: Ignores the backslashes
        # <<<: Redirects the information to the variable
        # $resultado: Variable that contains the information
        IFS=',' read -r id user action path <<< "$resultado"

        # Checks if the event occurred in the current directory or in a subdirectory
        if [[ "$path" == "$directorio_actual"* ]]; then
            # Prints the event
            printf "$formato" "$fecha" "$id" "$user" "$action" "$path"
        fi
    fi

    
}

# Check if a parameter was provided
if [ "$#" -eq 1 ]; then
    # Filters the events by the provided action
    grep -E "$1" $sylogDir | while IFS= read -r linea; do

        # Calls the function that prints the event
        Printer "$linea"
    done
elif [ "$#" -eq 0 ]; then
    # Show all events
    cat $sylogDir | while IFS= read -r linea; do

        # Calls the function that prints the event
        Printer "$linea"
    done
else
    while getopts ":d:u:" opt; do
        case $opt in
            d)
                # Filter by date
                mes="$OPTARG"
                fecha="$mes"
                dia="${!OPTIND}"
                if [[ "$dia" =~ ^[0-9]+$ ]]; then
                    shift
                    # If the day is 9 or less, enter two spaces, otherwise enter one
                    if [ $dia -le 9 ]; then
                        fecha="$mes  $dia"
                    else
                        fecha="$mes $dia"
                    fi
                else
                    dia=""
                fi
                grep -E "$fecha" "$sylogDir" | while IFS= read -r linea; do Printer "$linea"; done
                ;;
            u)
                # Filter by user
                usuario="$OPTARG"
                grep "$usuario" "$sylogDir" | while IFS= read -r linea; do Printer "$linea"; done
                ;;
            \?)
                echo "Opción inválida: -$OPTARG" >&2
                exit 1
                ;;
            :)
                echo "La opción -$OPTARG requiere un argumento." >&2
                exit 1
                ;;
    esac
done
fi